{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucia\\\\Desktop\\\\PPIV_integrador_final\\\\pp4\\\\agendar-paciente-fe\\\\agendar-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const apiEspecialidades = process.env.REACT_APP_API_ESPECIALIDADES;\n//   const apiDisponibles = process.env.REACT_APP_API_DISPONIBLES_ESPECIALIDAD;\n//   const apiBloqueadoTurno = process.env.REACT_APP_API_BLOQUEARTURNO;\n//   const apiLiberarTurno = process.env.REACT_APP_API_LIBERARTURNO;\n//   const apiReservarTurno = process.env.REACT_APP_API_RESERVAR_TURNO;\n//   const apiOcupadosPaciente = process.env.REACT_APP_API_OCUPADOS_PACIENTE;\n//   const apiCancelarTurno = process.env.REACT_APP_API_CANCELAR_TURNO;\n//   const PACIENTE_ID = 1;\n\n//   const [especialidades, setEspecialidades] = useState([]);\n//   const [especialidadSeleccionada, setEspecialidadSeleccionada] = useState(\"\");\n//   const [disponibles, setDisponibles] = useState([]);\n//   const [loadingEspecialidades, setLoadingEspecialidades] = useState(false);\n//   const [loadingDisponibles, setLoadingDisponibles] = useState(false);\n//   const [loadingTurnosOcupados, setLoadingTurnosOcupados] = useState(false);\n//   const [ocupados, setOcupados] = useState([]);\n\n//   const [turnoAConfirmar, setTurnoAConfirmar] = useState(null);\n//   const [mostrandoModal, setMostrandoModal] = useState(false);\n\n//   const [turnoACancelar, setTurnoACancelar] = useState(null);\n//   const [mostrandoModalCancelacion, setMostrandoModalCancelacion] =\n//     useState(false);\n\n//   const [modificandoTurno, setModificandoTurno] = useState(false);\n//   const [turnosAModificar, setTurnoAModificar] = useState(null);\n//   const [turnosNuevosParaModificacion, setTurnosNuevosParaModificacion] =\n//     useState([]);\n//   const [turnoNuevoAReservar, setTurnoNuevoAReservar] = useState([]);\n//   const [\n//     mostrandoModalConfirmarModificacion,\n//     setmostrandoModalConfirmarModificacion,\n//   ] = useState(false);\n//   const [fechaSeleccionada, setFechaSeleccionada] = useState(\n//     new Date().toISOString().split(\"T\")[0]\n//   );\n//   const [\n//     fechaSeleccionadaParaModificacion,\n//     setFechaSeleccionadaParaModificacion,\n//   ] = useState(new Date().toISOString().split(\"T\")[0]);\n\n//   /* ------------------------------------------------- Funciones ABM ----------------------------------------- */\n//   const recuperarTurnos = async (especialidad_id, fecha) => {\n//     const datos = { especialidad_id: especialidad_id, fecha: fecha };\n\n//     return await fetch(apiDisponibles, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(datos),\n//     })\n//       .then((res) => {\n//         if (res.status === 404) {\n//           return [];\n//         }\n\n//         return res.json();\n//       })\n//       .catch((err) => {\n//         console.error(\"Error al obtener disponibles:\", err);\n//         return [];\n//       });\n//   };\n\n//   const bloquearTurno = (id) => {\n//     const datos = { turno_id: id };\n//     fetch(apiBloqueadoTurno, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(datos),\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         console.log(data);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error al blockear el turno: \", err);\n//       });\n//   };\n\n//   const liberarTurno = (id) => {\n//     const datos = {\n//       turno_id: id,\n//     };\n//     fetch(apiLiberarTurno, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(datos),\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         console.log(data);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error al liberar el turno: \", err);\n//       });\n//   };\n\n//   const reservarTurno = async (turno) => {\n//     await fetch(apiReservarTurno, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(turno),\n//     })\n//       .then((res) => res.json())\n//       .then((respuesta) => {\n//         console.log(\"Respuesta del backend:\", respuesta);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error al enviar:\", error);\n//       });\n//   };\n\n//   const cancelarTurno = async (id) => {\n//     const datos = {\n//       turno_id: id,\n//     };\n//     await fetch(apiCancelarTurno, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(datos),\n//     })\n//       .then((res) => res.json())\n//       .then((respuesta) => {\n//         console.log(\"Respuesta del backend:\", respuesta);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error al enviar:\", error);\n//       });\n//   };\n\n//   const formatearFechaLocal = (fechaISO) => {\n//     const fecha = new Date(fechaISO);\n//     return fecha.toLocaleString(\"es-AR\", {\n//       dateStyle: \"short\",\n//       timeStyle: \"short\",\n//     });\n//   };\n\n//   /*-------------------------------------------Carga de turnos para reserva--------------------------------------------------------------*/\n\n//   const obtenerEspecialidades = () => {\n//     setLoadingEspecialidades(true);\n//     cargarTurnosOcupados();\n//     fetch(apiEspecialidades)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setEspecialidades(data);\n//         setLoadingEspecialidades(false);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error al obtener especialidades:\", err);\n//         setLoadingEspecialidades(false);\n//       });\n//   };\n\n//   const cargarDisponibles = async (id, fecha = fechaSeleccionada) => {\n//     setLoadingDisponibles(true);\n//     const turnos = await recuperarTurnos(id, fecha);\n//     setDisponibles(turnos);\n//     setLoadingDisponibles(false);\n//   };\n\n//   const handleChangeEspecialidad = (e) => {\n//     const id = e.target.value;\n//     setEspecialidadSeleccionada(id);\n//     if (id) {\n//       cargarDisponibles(id);\n//     } else {\n//       setDisponibles([]);\n//     }\n//   };\n\n//   const handleChangeFecha = async (e) => {\n//     const fecha = e.target.value;\n//     setFechaSeleccionada(fecha);\n//     if (fecha && especialidadSeleccionada) {\n//       await cargarDisponibles(especialidadSeleccionada, fecha);\n//     } else {\n//       setDisponibles([]);\n//     }\n//   };\n\n//   /*----------------------------------------------Reserva de turno-----------------------------------------------------------*/\n\n//   const abrirModalConfirmacion = (turno) => {\n//     bloquearTurno(turno.turno_id);\n//     setTurnoAConfirmar(turno);\n//     setMostrandoModal(true);\n//   };\n\n//   const cargarTurnosParaModificacion = async (id, fecha) => {\n//     setModificandoTurno(true);\n//     const turnos = await recuperarTurnos(id, fecha);\n//     console.log(turnos);\n//     setTurnosNuevosParaModificacion(turnos);\n//   };\n\n//   const cerrarModal = () => {\n//     setTurnoAConfirmar(null);\n//     setMostrandoModal(false);\n//   };\n\n//   const confirmarReserva = async () => {\n//     const datos = {\n//       turno_id: turnoAConfirmar.turno_id,\n//       paciente_id: PACIENTE_ID,\n//     };\n//     await reservarTurno(datos);\n\n//     if (especialidadSeleccionada) {\n//       cargarDisponibles(especialidadSeleccionada);\n//     }\n//     cerrarModal();\n//     cargarTurnosOcupados();\n//   };\n\n//   /*------------------------------------------------Cancelacion de turno----------------------------------------------*/\n\n//   const cancelarReserva = async () => {\n//     await cancelarTurno(turnoACancelar.turno_id);\n//     if (especialidadSeleccionada) {\n//       cargarDisponibles(especialidadSeleccionada);\n//     }\n//     cerrarModalCancelacion();\n//     cargarTurnosOcupados();\n//   };\n\n//   const abrirModalConfirmarCancelacion = (turno) => {\n//     setTurnoACancelar(turno);\n//     setMostrandoModalCancelacion(true);\n//   };\n\n//   const cerrarModalCancelacion = () => {\n//     setTurnoACancelar(null);\n//     setMostrandoModalCancelacion(false);\n//   };\n\n//   /*-------------------------------------------------Modificacion de turno----------------------------------------*/\n\n//   const abrirModalConfirmarModificacion = (turno) => {\n//     bloquearTurno(turno.turno_id);\n//     setmostrandoModalConfirmarModificacion(true);\n//     setTurnoNuevoAReservar(turno);\n//   };\n\n//   const cerrarModalModificacion = () => {\n//     setTurnoNuevoAReservar(null);\n//     setmostrandoModalConfirmarModificacion(false);\n//   };\n\n//   const confirmarModificacion = async () => {\n//     await cancelarTurno(turnosAModificar.turno_id);\n\n//     const datos = {\n//       turno_id: turnoNuevoAReservar.turno_id,\n//       paciente_id: PACIENTE_ID,\n//     };\n//     await reservarTurno(datos);\n\n//     if (especialidadSeleccionada) {\n//       cargarDisponibles(especialidadSeleccionada);\n//     }\n//     setModificandoTurno(false);\n//     cerrarModalModificacion();\n//     cargarTurnosOcupados();\n//     setTurnoAModificar(null);\n//     setTurnosNuevosParaModificacion([]);\n//     setTurnoNuevoAReservar(null);\n//   };\n\n//   const handleChangeFechaModificacion = async (e) => {\n//     const fecha = e.target.value;\n//     setFechaSeleccionadaParaModificacion(fecha);\n//     if (fecha && turnosAModificar.especialidad_id) {\n//       await cargarTurnosParaModificacion(\n//         turnosAModificar.especialidad_id,\n//         fecha\n//       );\n//     } else {\n//       setTurnosNuevosParaModificacion([]);\n//     }\n//   };\n\n//   /*-------------------------------------------Carga de turnos ocupados--------------------------------------------------------------*/\n\n//   const cargarTurnosOcupados = () => {\n//     fetch(`${apiOcupadosPaciente}/1`)\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setOcupados(data);\n//         setLoadingTurnosOcupados(false);\n//       })\n//       .catch((err) => {\n//         console.error(\"Error al obtener disponibles:\", err);\n//         setLoadingTurnosOcupados(false);\n//       });\n//   };\n\n//   /* --------------------------------------------------Visual----------------------------------------------------------- */\n\n//   return (\n//     <div style={{ padding: \"20px\" }}>\n//       <h1>Especialidades médicas</h1>\n\n//       <button onClick={obtenerEspecialidades}>Cargar especialidades</button>\n\n//       {loadingEspecialidades && <p>Cargando especialidades...</p>}\n\n//       {especialidades.length > 0 && (\n//         <div style={{ marginTop: \"20px\" }}>\n//           <label>Seleccionar especialidad:</label>\n//           <select\n//             value={especialidadSeleccionada}\n//             onChange={handleChangeEspecialidad}\n//             style={{ marginLeft: \"10px\", padding: \"5px\" }}\n//           >\n//             <option value=\"\">Seleccione una</option>\n//             {especialidades.map((esp) => (\n//               <option key={esp.especialidad_id} value={esp.especialidad_id}>\n//                 {esp.descripcion}\n//               </option>\n//             ))}\n//           </select>\n//           <div style={{ marginTop: \"10px\" }}>\n//             <label>Fecha:</label>\n//             <input\n//               type=\"date\"\n//               value={fechaSeleccionada}\n//               min={new Date().toISOString().split(\"T\")[0]}\n//               onChange={handleChangeFecha}\n//               style={{ marginLeft: \"10px\", padding: \"5px\" }}\n//             />\n//           </div>\n//         </div>\n//       )}\n\n//       {loadingDisponibles && <p>Cargando turnos disponibles...</p>}\n//       {especialidadSeleccionada &&\n//         !loadingDisponibles &&\n//         disponibles.length === 0 && (\n//           <p>No hay turnos disponibles en esa fecha</p>\n//         )}\n//       {disponibles.length > 0 && (\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>Turnos disponibles</h2>\n//           <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\n//             <thead>\n//               <tr>\n//                 <th>Fecha</th>\n//                 <th>Médico ID</th>\n//                 <th></th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {disponibles.map((item, index) => (\n//                 <tr key={index}>\n//                   <td>{formatearFechaLocal(item.fecha)}</td>\n//                   <td>{item.medico_id}</td>\n//                   <td>\n//                     <button\n//                       onClick={() =>\n//                         abrirModalConfirmacion({\n//                           turno_id: item.turno_id,\n//                           fecha: formatearFechaLocal(item.fecha),\n//                           medico_id: item.medico_id,\n//                         })\n//                       }\n//                     >\n//                       Reservar\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {loadingTurnosOcupados && <p>Cargando turnos ocupados...</p>}\n\n//       {ocupados.length > 0 && (\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>Turnos ocupados</h2>\n//           <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\n//             <thead>\n//               <tr>\n//                 <th>Fecha</th>\n//                 <th>Médico ID</th>\n//                 <th></th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {ocupados.map((item, index) => (\n//                 <tr key={index}>\n//                   <td>{formatearFechaLocal(item.fecha)}</td>\n//                   <td>{item.medico_id}</td>\n//                   <td>\n//                     <button\n//                       onClick={() => {\n//                         setTurnoAModificar(item);\n//                         const fecha = new Date(item.fecha)\n//                           .toISOString()\n//                           .split(\"T\")[0];\n//                         setFechaSeleccionadaParaModificacion(fecha);\n//                         cargarTurnosParaModificacion(\n//                           item.especialidad_id,\n//                           fecha\n//                         );\n//                       }}\n//                     >\n//                       Modificar\n//                     </button>\n//                     <button\n//                       onClick={() =>\n//                         abrirModalConfirmarCancelacion({\n//                           turno_id: item.turno_id,\n//                           fecha: formatearFechaLocal(item.fecha),\n//                           medico_id: item.medico_id,\n//                         })\n//                       }\n//                     >\n//                       Cancelar\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {modificandoTurno && turnosNuevosParaModificacion.length >= 0 && (\n//         <div style={{ marginTop: \"10px\" }}>\n//           <label>Fecha:</label>\n//           <input\n//             type=\"date\"\n//             value={fechaSeleccionadaParaModificacion}\n//             onChange={handleChangeFechaModificacion}\n//             min={new Date().toISOString().split(\"T\")[0]}\n//             style={{ marginLeft: \"10px\", padding: \"5px\" }}\n//           />\n//         </div>\n//       )}\n//       {modificandoTurno && turnosNuevosParaModificacion.length === 0 && (\n//         <p>No hay turnos disponibles en esa fecha</p>\n//       )}\n//       {modificandoTurno && turnosNuevosParaModificacion.length > 0 && (\n//         <div style={{ marginTop: \"20px\" }}>\n//           <h2>Turnos disponibles</h2>\n//           <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\n//             <thead>\n//               <tr>\n//                 <th>Fecha</th>\n//                 <th>Médico ID</th>\n//                 <th></th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {turnosNuevosParaModificacion.map((item, index) => (\n//                 <tr key={index}>\n//                   <td>{formatearFechaLocal(item.fecha)}</td>\n//                   <td>{item.medico_id}</td>\n//                   <td>\n//                     <button\n//                       onClick={() =>\n//                         abrirModalConfirmarModificacion({\n//                           turno_id: item.turno_id,\n//                           fecha: formatearFechaLocal(item.fecha),\n//                           medico_id: item.medico_id,\n//                         })\n//                       }\n//                     >\n//                       Reservar\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {mostrandoModal && turnoAConfirmar && (\n//         <div\n//           style={{\n//             position: \"fixed\",\n//             top: 0,\n//             left: 0,\n//             width: \"100vw\",\n//             height: \"100vh\",\n//             backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <div\n//             style={{\n//               backgroundColor: \"white\",\n//               padding: \"20px\",\n//               borderRadius: \"8px\",\n//               textAlign: \"center\",\n//               minWidth: \"300px\",\n//             }}\n//           >\n//             <h3>¿Confirmar reserva?</h3>\n//             <p>\n//               <strong>Fecha:</strong> {turnoAConfirmar.fecha}\n//               <br />\n//               <strong>Médico ID:</strong> {turnoAConfirmar.medico_id}\n//             </p>\n//             <div style={{ marginTop: \"20px\" }}>\n//               <button\n//                 onClick={confirmarReserva}\n//                 style={{ marginRight: \"10px\" }}\n//               >\n//                 Confirmar\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   liberarTurno(turnoAConfirmar.turno_id);\n//                   cerrarModal();\n//                 }}\n//               >\n//                 Cancelar\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {mostrandoModalCancelacion && turnoACancelar && (\n//         <div\n//           style={{\n//             position: \"fixed\",\n//             top: 0,\n//             left: 0,\n//             width: \"100vw\",\n//             height: \"100vh\",\n//             backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             zIndex: 1000,\n//           }}\n//         >\n//           <div\n//             style={{\n//               backgroundColor: \"white\",\n//               padding: \"20px\",\n//               borderRadius: \"8px\",\n//               textAlign: \"center\",\n//               minWidth: \"300px\",\n//             }}\n//           >\n//             <h3>¿Cancelar reserva?</h3>\n//             <p>\n//               <strong>Fecha:</strong> {turnoACancelar.fecha}\n//               <br />\n//               <strong>Médico ID:</strong> {turnoACancelar.medico_id}\n//             </p>\n//             <div style={{ marginTop: \"20px\" }}>\n//               <button onClick={cancelarReserva} style={{ marginRight: \"10px\" }}>\n//                 Sí\n//               </button>\n//               <button onClick={cerrarModalCancelacion}>No</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {mostrandoModalConfirmarModificacion &&\n//         turnosAModificar &&\n//         turnoNuevoAReservar && (\n//           <div\n//             style={{\n//               position: \"fixed\",\n//               top: 0,\n//               left: 0,\n//               width: \"100vw\",\n//               height: \"100vh\",\n//               backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n//               display: \"flex\",\n//               justifyContent: \"center\",\n//               alignItems: \"center\",\n//               zIndex: 1000,\n//             }}\n//           >\n//             <div\n//               style={{\n//                 backgroundColor: \"white\",\n//                 padding: \"20px\",\n//                 borderRadius: \"8px\",\n//                 textAlign: \"center\",\n//                 minWidth: \"300px\",\n//               }}\n//             >\n//               <h3>¿Confirmar modificacion?</h3>\n//               <p>\n//                 <strong>Fecha vieja:</strong>{\" \"}\n//                 {formatearFechaLocal(turnosAModificar.fecha)}\n//                 <br />\n//                 <strong>Médico ID:</strong> {turnosAModificar.medico_id}\n//                 <br />\n//                 <strong>Fecha nueva:</strong> {turnoNuevoAReservar.fecha}\n//               </p>\n//               <div style={{ marginTop: \"20px\" }}>\n//                 <button onClick={confirmarModificacion}>Aceptar</button>\n//                 <button\n//                   onClick={() => {\n//                     liberarTurno(turnoNuevoAReservar.turno_id);\n//                     cerrarModalModificacion();\n//                   }}\n//                 >\n//                   Cancelar\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // Estados para mostrar diferentes vistas\n  const [vista, setVista] = useState(null); // null = bienvenida, \"reserva\" o \"ocupados\"\n\n  // Variables de entorno para textos e imágenes\n  const headerIconUrl = process.env.NEXT_PUBLIC_HEADER_ICON_URL || \"\";\n  const headerTitle = process.env.NEXT_PUBLIC_HEADER_TITLE || \"Turnos Médicos\";\n  const userName = process.env.NEXT_PUBLIC_USER_NAME || \"Usuario\";\n\n  // Funciones y estados originales sin modificar\n  // (Se mantienen igual que tu código original)\n  // ...\n\n  // Funciones para mostrar diferentes vistas\n  const mostrarReserva = () => setVista(\"reserva\");\n  const mostrarOcupados = () => setVista(\"ocupados\");\n  const salir = () => {\n    // Aquí podrías implementar lógica de logout si quieres\n    setVista(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"10px 20px\",\n        backgroundColor: \"#007bff\",\n        color: \"white\",\n        gap: \"10px\"\n      },\n      children: [headerIconUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: headerIconUrl,\n        alt: \"Icono\",\n        style: {\n          height: 40,\n          width: 40,\n          objectFit: \"contain\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          margin: 0,\n          fontSize: \"1.5rem\"\n        },\n        children: headerTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        style: {\n          width: 200,\n          borderRight: \"1px solid #ddd\",\n          padding: \"20px\",\n          backgroundColor: \"#f8f9fa\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: mostrarReserva,\n          style: {\n            padding: \"10px\",\n            cursor: \"pointer\",\n            backgroundColor: vista === \"reserva\" ? \"#007bff\" : \"transparent\",\n            color: vista === \"reserva\" ? \"white\" : \"black\",\n            border: \"none\",\n            borderRadius: 4,\n            textAlign: \"left\"\n          },\n          children: \"Reservar nuevo turno\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: mostrarOcupados,\n          style: {\n            padding: \"10px\",\n            cursor: \"pointer\",\n            backgroundColor: vista === \"ocupados\" ? \"#007bff\" : \"transparent\",\n            color: vista === \"ocupados\" ? \"white\" : \"black\",\n            border: \"none\",\n            borderRadius: 4,\n            textAlign: \"left\"\n          },\n          children: \"Ver turnos ocupados\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: salir,\n          style: {\n            padding: \"10px\",\n            cursor: \"pointer\",\n            backgroundColor: \"transparent\",\n            color: \"black\",\n            border: \"none\",\n            borderRadius: 4,\n            textAlign: \"left\",\n            marginTop: \"auto\"\n          },\n          children: \"Salir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        style: {\n          flexGrow: 1,\n          padding: 20\n        },\n        children: [vista === null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Bienvenido, \", userName, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Seleccione una opci\\xF3n del men\\xFA para comenzar.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 13\n        }, this), vista === \"reserva\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Reservar nuevo turno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Aqu\\xED va el formulario o componente para reservar turnos.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this), vista === \"ocupados\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Turnos ocupados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Aqu\\xED se muestran los turnos ocupados y opciones de gesti\\xF3n.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 665,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Em9z/zFmh1dd8PSEsmHYHHHntaU=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","vista","setVista","headerIconUrl","process","env","NEXT_PUBLIC_HEADER_ICON_URL","headerTitle","NEXT_PUBLIC_HEADER_TITLE","userName","NEXT_PUBLIC_USER_NAME","mostrarReserva","mostrarOcupados","salir","style","display","flexDirection","height","children","alignItems","padding","backgroundColor","color","gap","src","alt","width","objectFit","fileName","_jsxFileName","lineNumber","columnNumber","margin","fontSize","flexGrow","borderRight","onClick","cursor","border","borderRadius","textAlign","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/lucia/Desktop/PPIV_integrador_final/pp4/agendar-paciente-fe/agendar-app/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// function App() {\r\n//   const apiEspecialidades = process.env.REACT_APP_API_ESPECIALIDADES;\r\n//   const apiDisponibles = process.env.REACT_APP_API_DISPONIBLES_ESPECIALIDAD;\r\n//   const apiBloqueadoTurno = process.env.REACT_APP_API_BLOQUEARTURNO;\r\n//   const apiLiberarTurno = process.env.REACT_APP_API_LIBERARTURNO;\r\n//   const apiReservarTurno = process.env.REACT_APP_API_RESERVAR_TURNO;\r\n//   const apiOcupadosPaciente = process.env.REACT_APP_API_OCUPADOS_PACIENTE;\r\n//   const apiCancelarTurno = process.env.REACT_APP_API_CANCELAR_TURNO;\r\n//   const PACIENTE_ID = 1;\r\n\r\n//   const [especialidades, setEspecialidades] = useState([]);\r\n//   const [especialidadSeleccionada, setEspecialidadSeleccionada] = useState(\"\");\r\n//   const [disponibles, setDisponibles] = useState([]);\r\n//   const [loadingEspecialidades, setLoadingEspecialidades] = useState(false);\r\n//   const [loadingDisponibles, setLoadingDisponibles] = useState(false);\r\n//   const [loadingTurnosOcupados, setLoadingTurnosOcupados] = useState(false);\r\n//   const [ocupados, setOcupados] = useState([]);\r\n\r\n//   const [turnoAConfirmar, setTurnoAConfirmar] = useState(null);\r\n//   const [mostrandoModal, setMostrandoModal] = useState(false);\r\n\r\n//   const [turnoACancelar, setTurnoACancelar] = useState(null);\r\n//   const [mostrandoModalCancelacion, setMostrandoModalCancelacion] =\r\n//     useState(false);\r\n\r\n//   const [modificandoTurno, setModificandoTurno] = useState(false);\r\n//   const [turnosAModificar, setTurnoAModificar] = useState(null);\r\n//   const [turnosNuevosParaModificacion, setTurnosNuevosParaModificacion] =\r\n//     useState([]);\r\n//   const [turnoNuevoAReservar, setTurnoNuevoAReservar] = useState([]);\r\n//   const [\r\n//     mostrandoModalConfirmarModificacion,\r\n//     setmostrandoModalConfirmarModificacion,\r\n//   ] = useState(false);\r\n//   const [fechaSeleccionada, setFechaSeleccionada] = useState(\r\n//     new Date().toISOString().split(\"T\")[0]\r\n//   );\r\n//   const [\r\n//     fechaSeleccionadaParaModificacion,\r\n//     setFechaSeleccionadaParaModificacion,\r\n//   ] = useState(new Date().toISOString().split(\"T\")[0]);\r\n\r\n//   /* ------------------------------------------------- Funciones ABM ----------------------------------------- */\r\n//   const recuperarTurnos = async (especialidad_id, fecha) => {\r\n//     const datos = { especialidad_id: especialidad_id, fecha: fecha };\r\n\r\n//     return await fetch(apiDisponibles, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(datos),\r\n//     })\r\n//       .then((res) => {\r\n//         if (res.status === 404) {\r\n//           return [];\r\n//         }\r\n\r\n//         return res.json();\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error al obtener disponibles:\", err);\r\n//         return [];\r\n//       });\r\n//   };\r\n\r\n//   const bloquearTurno = (id) => {\r\n//     const datos = { turno_id: id };\r\n//     fetch(apiBloqueadoTurno, {\r\n//       method: \"PUT\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(datos),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n//         console.log(data);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error al blockear el turno: \", err);\r\n//       });\r\n//   };\r\n\r\n//   const liberarTurno = (id) => {\r\n//     const datos = {\r\n//       turno_id: id,\r\n//     };\r\n//     fetch(apiLiberarTurno, {\r\n//       method: \"PUT\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(datos),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n//         console.log(data);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error al liberar el turno: \", err);\r\n//       });\r\n//   };\r\n\r\n//   const reservarTurno = async (turno) => {\r\n//     await fetch(apiReservarTurno, {\r\n//       method: \"PUT\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(turno),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((respuesta) => {\r\n//         console.log(\"Respuesta del backend:\", respuesta);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error al enviar:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const cancelarTurno = async (id) => {\r\n//     const datos = {\r\n//       turno_id: id,\r\n//     };\r\n//     await fetch(apiCancelarTurno, {\r\n//       method: \"PUT\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(datos),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((respuesta) => {\r\n//         console.log(\"Respuesta del backend:\", respuesta);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error al enviar:\", error);\r\n//       });\r\n//   };\r\n\r\n//   const formatearFechaLocal = (fechaISO) => {\r\n//     const fecha = new Date(fechaISO);\r\n//     return fecha.toLocaleString(\"es-AR\", {\r\n//       dateStyle: \"short\",\r\n//       timeStyle: \"short\",\r\n//     });\r\n//   };\r\n\r\n//   /*-------------------------------------------Carga de turnos para reserva--------------------------------------------------------------*/\r\n\r\n//   const obtenerEspecialidades = () => {\r\n//     setLoadingEspecialidades(true);\r\n//     cargarTurnosOcupados();\r\n//     fetch(apiEspecialidades)\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n//         setEspecialidades(data);\r\n//         setLoadingEspecialidades(false);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error al obtener especialidades:\", err);\r\n//         setLoadingEspecialidades(false);\r\n//       });\r\n//   };\r\n\r\n//   const cargarDisponibles = async (id, fecha = fechaSeleccionada) => {\r\n//     setLoadingDisponibles(true);\r\n//     const turnos = await recuperarTurnos(id, fecha);\r\n//     setDisponibles(turnos);\r\n//     setLoadingDisponibles(false);\r\n//   };\r\n\r\n//   const handleChangeEspecialidad = (e) => {\r\n//     const id = e.target.value;\r\n//     setEspecialidadSeleccionada(id);\r\n//     if (id) {\r\n//       cargarDisponibles(id);\r\n//     } else {\r\n//       setDisponibles([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleChangeFecha = async (e) => {\r\n//     const fecha = e.target.value;\r\n//     setFechaSeleccionada(fecha);\r\n//     if (fecha && especialidadSeleccionada) {\r\n//       await cargarDisponibles(especialidadSeleccionada, fecha);\r\n//     } else {\r\n//       setDisponibles([]);\r\n//     }\r\n//   };\r\n\r\n//   /*----------------------------------------------Reserva de turno-----------------------------------------------------------*/\r\n\r\n//   const abrirModalConfirmacion = (turno) => {\r\n//     bloquearTurno(turno.turno_id);\r\n//     setTurnoAConfirmar(turno);\r\n//     setMostrandoModal(true);\r\n//   };\r\n\r\n//   const cargarTurnosParaModificacion = async (id, fecha) => {\r\n//     setModificandoTurno(true);\r\n//     const turnos = await recuperarTurnos(id, fecha);\r\n//     console.log(turnos);\r\n//     setTurnosNuevosParaModificacion(turnos);\r\n//   };\r\n\r\n//   const cerrarModal = () => {\r\n//     setTurnoAConfirmar(null);\r\n//     setMostrandoModal(false);\r\n//   };\r\n\r\n//   const confirmarReserva = async () => {\r\n//     const datos = {\r\n//       turno_id: turnoAConfirmar.turno_id,\r\n//       paciente_id: PACIENTE_ID,\r\n//     };\r\n//     await reservarTurno(datos);\r\n\r\n//     if (especialidadSeleccionada) {\r\n//       cargarDisponibles(especialidadSeleccionada);\r\n//     }\r\n//     cerrarModal();\r\n//     cargarTurnosOcupados();\r\n//   };\r\n\r\n//   /*------------------------------------------------Cancelacion de turno----------------------------------------------*/\r\n\r\n//   const cancelarReserva = async () => {\r\n//     await cancelarTurno(turnoACancelar.turno_id);\r\n//     if (especialidadSeleccionada) {\r\n//       cargarDisponibles(especialidadSeleccionada);\r\n//     }\r\n//     cerrarModalCancelacion();\r\n//     cargarTurnosOcupados();\r\n//   };\r\n\r\n//   const abrirModalConfirmarCancelacion = (turno) => {\r\n//     setTurnoACancelar(turno);\r\n//     setMostrandoModalCancelacion(true);\r\n//   };\r\n\r\n//   const cerrarModalCancelacion = () => {\r\n//     setTurnoACancelar(null);\r\n//     setMostrandoModalCancelacion(false);\r\n//   };\r\n\r\n//   /*-------------------------------------------------Modificacion de turno----------------------------------------*/\r\n\r\n//   const abrirModalConfirmarModificacion = (turno) => {\r\n//     bloquearTurno(turno.turno_id);\r\n//     setmostrandoModalConfirmarModificacion(true);\r\n//     setTurnoNuevoAReservar(turno);\r\n//   };\r\n\r\n//   const cerrarModalModificacion = () => {\r\n//     setTurnoNuevoAReservar(null);\r\n//     setmostrandoModalConfirmarModificacion(false);\r\n//   };\r\n\r\n//   const confirmarModificacion = async () => {\r\n//     await cancelarTurno(turnosAModificar.turno_id);\r\n\r\n//     const datos = {\r\n//       turno_id: turnoNuevoAReservar.turno_id,\r\n//       paciente_id: PACIENTE_ID,\r\n//     };\r\n//     await reservarTurno(datos);\r\n\r\n//     if (especialidadSeleccionada) {\r\n//       cargarDisponibles(especialidadSeleccionada);\r\n//     }\r\n//     setModificandoTurno(false);\r\n//     cerrarModalModificacion();\r\n//     cargarTurnosOcupados();\r\n//     setTurnoAModificar(null);\r\n//     setTurnosNuevosParaModificacion([]);\r\n//     setTurnoNuevoAReservar(null);\r\n//   };\r\n\r\n//   const handleChangeFechaModificacion = async (e) => {\r\n//     const fecha = e.target.value;\r\n//     setFechaSeleccionadaParaModificacion(fecha);\r\n//     if (fecha && turnosAModificar.especialidad_id) {\r\n//       await cargarTurnosParaModificacion(\r\n//         turnosAModificar.especialidad_id,\r\n//         fecha\r\n//       );\r\n//     } else {\r\n//       setTurnosNuevosParaModificacion([]);\r\n//     }\r\n//   };\r\n\r\n//   /*-------------------------------------------Carga de turnos ocupados--------------------------------------------------------------*/\r\n\r\n//   const cargarTurnosOcupados = () => {\r\n//     fetch(`${apiOcupadosPaciente}/1`)\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n//         setOcupados(data);\r\n//         setLoadingTurnosOcupados(false);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error al obtener disponibles:\", err);\r\n//         setLoadingTurnosOcupados(false);\r\n//       });\r\n//   };\r\n\r\n//   /* --------------------------------------------------Visual----------------------------------------------------------- */\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\" }}>\r\n//       <h1>Especialidades médicas</h1>\r\n\r\n//       <button onClick={obtenerEspecialidades}>Cargar especialidades</button>\r\n\r\n//       {loadingEspecialidades && <p>Cargando especialidades...</p>}\r\n\r\n//       {especialidades.length > 0 && (\r\n//         <div style={{ marginTop: \"20px\" }}>\r\n//           <label>Seleccionar especialidad:</label>\r\n//           <select\r\n//             value={especialidadSeleccionada}\r\n//             onChange={handleChangeEspecialidad}\r\n//             style={{ marginLeft: \"10px\", padding: \"5px\" }}\r\n//           >\r\n//             <option value=\"\">Seleccione una</option>\r\n//             {especialidades.map((esp) => (\r\n//               <option key={esp.especialidad_id} value={esp.especialidad_id}>\r\n//                 {esp.descripcion}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//           <div style={{ marginTop: \"10px\" }}>\r\n//             <label>Fecha:</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               value={fechaSeleccionada}\r\n//               min={new Date().toISOString().split(\"T\")[0]}\r\n//               onChange={handleChangeFecha}\r\n//               style={{ marginLeft: \"10px\", padding: \"5px\" }}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {loadingDisponibles && <p>Cargando turnos disponibles...</p>}\r\n//       {especialidadSeleccionada &&\r\n//         !loadingDisponibles &&\r\n//         disponibles.length === 0 && (\r\n//           <p>No hay turnos disponibles en esa fecha</p>\r\n//         )}\r\n//       {disponibles.length > 0 && (\r\n//         <div style={{ marginTop: \"20px\" }}>\r\n//           <h2>Turnos disponibles</h2>\r\n//           <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Fecha</th>\r\n//                 <th>Médico ID</th>\r\n//                 <th></th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {disponibles.map((item, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{formatearFechaLocal(item.fecha)}</td>\r\n//                   <td>{item.medico_id}</td>\r\n//                   <td>\r\n//                     <button\r\n//                       onClick={() =>\r\n//                         abrirModalConfirmacion({\r\n//                           turno_id: item.turno_id,\r\n//                           fecha: formatearFechaLocal(item.fecha),\r\n//                           medico_id: item.medico_id,\r\n//                         })\r\n//                       }\r\n//                     >\r\n//                       Reservar\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n\r\n//       {loadingTurnosOcupados && <p>Cargando turnos ocupados...</p>}\r\n\r\n//       {ocupados.length > 0 && (\r\n//         <div style={{ marginTop: \"20px\" }}>\r\n//           <h2>Turnos ocupados</h2>\r\n//           <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Fecha</th>\r\n//                 <th>Médico ID</th>\r\n//                 <th></th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {ocupados.map((item, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{formatearFechaLocal(item.fecha)}</td>\r\n//                   <td>{item.medico_id}</td>\r\n//                   <td>\r\n//                     <button\r\n//                       onClick={() => {\r\n//                         setTurnoAModificar(item);\r\n//                         const fecha = new Date(item.fecha)\r\n//                           .toISOString()\r\n//                           .split(\"T\")[0];\r\n//                         setFechaSeleccionadaParaModificacion(fecha);\r\n//                         cargarTurnosParaModificacion(\r\n//                           item.especialidad_id,\r\n//                           fecha\r\n//                         );\r\n//                       }}\r\n//                     >\r\n//                       Modificar\r\n//                     </button>\r\n//                     <button\r\n//                       onClick={() =>\r\n//                         abrirModalConfirmarCancelacion({\r\n//                           turno_id: item.turno_id,\r\n//                           fecha: formatearFechaLocal(item.fecha),\r\n//                           medico_id: item.medico_id,\r\n//                         })\r\n//                       }\r\n//                     >\r\n//                       Cancelar\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n\r\n//       {modificandoTurno && turnosNuevosParaModificacion.length >= 0 && (\r\n//         <div style={{ marginTop: \"10px\" }}>\r\n//           <label>Fecha:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             value={fechaSeleccionadaParaModificacion}\r\n//             onChange={handleChangeFechaModificacion}\r\n//             min={new Date().toISOString().split(\"T\")[0]}\r\n//             style={{ marginLeft: \"10px\", padding: \"5px\" }}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//       {modificandoTurno && turnosNuevosParaModificacion.length === 0 && (\r\n//         <p>No hay turnos disponibles en esa fecha</p>\r\n//       )}\r\n//       {modificandoTurno && turnosNuevosParaModificacion.length > 0 && (\r\n//         <div style={{ marginTop: \"20px\" }}>\r\n//           <h2>Turnos disponibles</h2>\r\n//           <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Fecha</th>\r\n//                 <th>Médico ID</th>\r\n//                 <th></th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {turnosNuevosParaModificacion.map((item, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{formatearFechaLocal(item.fecha)}</td>\r\n//                   <td>{item.medico_id}</td>\r\n//                   <td>\r\n//                     <button\r\n//                       onClick={() =>\r\n//                         abrirModalConfirmarModificacion({\r\n//                           turno_id: item.turno_id,\r\n//                           fecha: formatearFechaLocal(item.fecha),\r\n//                           medico_id: item.medico_id,\r\n//                         })\r\n//                       }\r\n//                     >\r\n//                       Reservar\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n\r\n//       {mostrandoModal && turnoAConfirmar && (\r\n//         <div\r\n//           style={{\r\n//             position: \"fixed\",\r\n//             top: 0,\r\n//             left: 0,\r\n//             width: \"100vw\",\r\n//             height: \"100vh\",\r\n//             backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n//             display: \"flex\",\r\n//             justifyContent: \"center\",\r\n//             alignItems: \"center\",\r\n//             zIndex: 1000,\r\n//           }}\r\n//         >\r\n//           <div\r\n//             style={{\r\n//               backgroundColor: \"white\",\r\n//               padding: \"20px\",\r\n//               borderRadius: \"8px\",\r\n//               textAlign: \"center\",\r\n//               minWidth: \"300px\",\r\n//             }}\r\n//           >\r\n//             <h3>¿Confirmar reserva?</h3>\r\n//             <p>\r\n//               <strong>Fecha:</strong> {turnoAConfirmar.fecha}\r\n//               <br />\r\n//               <strong>Médico ID:</strong> {turnoAConfirmar.medico_id}\r\n//             </p>\r\n//             <div style={{ marginTop: \"20px\" }}>\r\n//               <button\r\n//                 onClick={confirmarReserva}\r\n//                 style={{ marginRight: \"10px\" }}\r\n//               >\r\n//                 Confirmar\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   liberarTurno(turnoAConfirmar.turno_id);\r\n//                   cerrarModal();\r\n//                 }}\r\n//               >\r\n//                 Cancelar\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {mostrandoModalCancelacion && turnoACancelar && (\r\n//         <div\r\n//           style={{\r\n//             position: \"fixed\",\r\n//             top: 0,\r\n//             left: 0,\r\n//             width: \"100vw\",\r\n//             height: \"100vh\",\r\n//             backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n//             display: \"flex\",\r\n//             justifyContent: \"center\",\r\n//             alignItems: \"center\",\r\n//             zIndex: 1000,\r\n//           }}\r\n//         >\r\n//           <div\r\n//             style={{\r\n//               backgroundColor: \"white\",\r\n//               padding: \"20px\",\r\n//               borderRadius: \"8px\",\r\n//               textAlign: \"center\",\r\n//               minWidth: \"300px\",\r\n//             }}\r\n//           >\r\n//             <h3>¿Cancelar reserva?</h3>\r\n//             <p>\r\n//               <strong>Fecha:</strong> {turnoACancelar.fecha}\r\n//               <br />\r\n//               <strong>Médico ID:</strong> {turnoACancelar.medico_id}\r\n//             </p>\r\n//             <div style={{ marginTop: \"20px\" }}>\r\n//               <button onClick={cancelarReserva} style={{ marginRight: \"10px\" }}>\r\n//                 Sí\r\n//               </button>\r\n//               <button onClick={cerrarModalCancelacion}>No</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {mostrandoModalConfirmarModificacion &&\r\n//         turnosAModificar &&\r\n//         turnoNuevoAReservar && (\r\n//           <div\r\n//             style={{\r\n//               position: \"fixed\",\r\n//               top: 0,\r\n//               left: 0,\r\n//               width: \"100vw\",\r\n//               height: \"100vh\",\r\n//               backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n//               display: \"flex\",\r\n//               justifyContent: \"center\",\r\n//               alignItems: \"center\",\r\n//               zIndex: 1000,\r\n//             }}\r\n//           >\r\n//             <div\r\n//               style={{\r\n//                 backgroundColor: \"white\",\r\n//                 padding: \"20px\",\r\n//                 borderRadius: \"8px\",\r\n//                 textAlign: \"center\",\r\n//                 minWidth: \"300px\",\r\n//               }}\r\n//             >\r\n//               <h3>¿Confirmar modificacion?</h3>\r\n//               <p>\r\n//                 <strong>Fecha vieja:</strong>{\" \"}\r\n//                 {formatearFechaLocal(turnosAModificar.fecha)}\r\n//                 <br />\r\n//                 <strong>Médico ID:</strong> {turnosAModificar.medico_id}\r\n//                 <br />\r\n//                 <strong>Fecha nueva:</strong> {turnoNuevoAReservar.fecha}\r\n//               </p>\r\n//               <div style={{ marginTop: \"20px\" }}>\r\n//                 <button onClick={confirmarModificacion}>Aceptar</button>\r\n//                 <button\r\n//                   onClick={() => {\r\n//                     liberarTurno(turnoNuevoAReservar.turno_id);\r\n//                     cerrarModalModificacion();\r\n//                   }}\r\n//                 >\r\n//                   Cancelar\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function App() {\r\n  // Estados para mostrar diferentes vistas\r\n  const [vista, setVista] = useState(null); // null = bienvenida, \"reserva\" o \"ocupados\"\r\n\r\n  // Variables de entorno para textos e imágenes\r\n  const headerIconUrl = process.env.NEXT_PUBLIC_HEADER_ICON_URL || \"\";\r\n  const headerTitle = process.env.NEXT_PUBLIC_HEADER_TITLE || \"Turnos Médicos\";\r\n  const userName = process.env.NEXT_PUBLIC_USER_NAME || \"Usuario\";\r\n\r\n  // Funciones y estados originales sin modificar\r\n  // (Se mantienen igual que tu código original)\r\n  // ...\r\n\r\n  // Funciones para mostrar diferentes vistas\r\n  const mostrarReserva = () => setVista(\"reserva\");\r\n  const mostrarOcupados = () => setVista(\"ocupados\");\r\n  const salir = () => {\r\n    // Aquí podrías implementar lógica de logout si quieres\r\n    setVista(null);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}>\r\n      {/* Header */}\r\n      <header\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          padding: \"10px 20px\",\r\n          backgroundColor: \"#007bff\",\r\n          color: \"white\",\r\n          gap: \"10px\",\r\n        }}\r\n      >\r\n        {headerIconUrl && (\r\n          <img\r\n            src={headerIconUrl}\r\n            alt=\"Icono\"\r\n            style={{ height: 40, width: 40, objectFit: \"contain\" }}\r\n          />\r\n        )}\r\n        <h1 style={{ margin: 0, fontSize: \"1.5rem\" }}>{headerTitle}</h1>\r\n      </header>\r\n\r\n      {/* Body: menú + contenido */}\r\n      <div style={{ display: \"flex\", flexGrow: 1 }}>\r\n        {/* Menú lateral */}\r\n        <nav\r\n          style={{\r\n            width: 200,\r\n            borderRight: \"1px solid #ddd\",\r\n            padding: \"20px\",\r\n            backgroundColor: \"#f8f9fa\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            gap: \"10px\",\r\n          }}\r\n        >\r\n          <button\r\n            onClick={mostrarReserva}\r\n            style={{\r\n              padding: \"10px\",\r\n              cursor: \"pointer\",\r\n              backgroundColor: vista === \"reserva\" ? \"#007bff\" : \"transparent\",\r\n              color: vista === \"reserva\" ? \"white\" : \"black\",\r\n              border: \"none\",\r\n              borderRadius: 4,\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            Reservar nuevo turno\r\n          </button>\r\n          <button\r\n            onClick={mostrarOcupados}\r\n            style={{\r\n              padding: \"10px\",\r\n              cursor: \"pointer\",\r\n              backgroundColor: vista === \"ocupados\" ? \"#007bff\" : \"transparent\",\r\n              color: vista === \"ocupados\" ? \"white\" : \"black\",\r\n              border: \"none\",\r\n              borderRadius: 4,\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            Ver turnos ocupados\r\n          </button>\r\n          <button\r\n            onClick={salir}\r\n            style={{\r\n              padding: \"10px\",\r\n              cursor: \"pointer\",\r\n              backgroundColor: \"transparent\",\r\n              color: \"black\",\r\n              border: \"none\",\r\n              borderRadius: 4,\r\n              textAlign: \"left\",\r\n              marginTop: \"auto\",\r\n            }}\r\n          >\r\n            Salir\r\n          </button>\r\n        </nav>\r\n\r\n        {/* Contenido principal */}\r\n        <main style={{ flexGrow: 1, padding: 20 }}>\r\n          {vista === null && (\r\n            <div>\r\n              <h2>Bienvenido, {userName}!</h2>\r\n              <p>Seleccione una opción del menú para comenzar.</p>\r\n            </div>\r\n          )}\r\n\r\n          {vista === \"reserva\" && (\r\n            <div>\r\n              {/* Aquí va todo lo relativo a la reserva de nuevo turno */}\r\n              {/* Puedes copiar aquí el JSX y lógica que ya tienes para la reserva */}\r\n              <h2>Reservar nuevo turno</h2>\r\n              {/* Ejemplo simple, reemplaza con tu contenido original */}\r\n              <p>Aquí va el formulario o componente para reservar turnos.</p>\r\n            </div>\r\n          )}\r\n\r\n          {vista === \"ocupados\" && (\r\n            <div>\r\n              {/* Aquí va todo lo relativo a ver/modificar/cancelar turnos ocupados */}\r\n              <h2>Turnos ocupados</h2>\r\n              {/* Ejemplo simple, reemplaza con tu contenido original */}\r\n              <p>Aquí se muestran los turnos ocupados y opciones de gestión.</p>\r\n            </div>\r\n          )}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}